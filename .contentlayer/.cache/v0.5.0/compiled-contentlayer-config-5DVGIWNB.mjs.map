{
  "version": 3,
  "sources": ["../../../lib/utils.ts", "../../../registry/components/ui/animated-list.tsx", "../../../registry/components/example/animated-list-demo.tsx", "../../../contentlayer.config.ts", "../../../lib/rehype-component.ts", "../../../registry/index.tsx", "../../../lib/rehype-npm-command.ts"],
  "sourcesContent": ["import { Metadata } from \"next\";\n\nimport clsx, { ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n\treturn name\n\t\t.replace(/-/g, \" \")\n\t\t.replace(/([A-Z])/g, \" $1\")\n\t\t.trim()\n\t\t.split(/\\s+/)\n\t\t.map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n\t\t.join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n\tif (!str || str.length <= length) return str;\n\treturn `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n\tfetch(...args).then((res) => res.json());\n\n/**\n * Capitalizes first letters of words in string.\n * @param {string} str String to be modified\n * @param {boolean=false} lower Whether all other letters should be lowercased\n * @return {string}\n * @see https://stackoverflow.com/questions/2332811/capitalize-words-in-string/7592235#7592235\n * @usage\n *   capitalize('fix this string');     // -> 'Fix This String'\n *   capitalize('javaSCrIPT');          // -> 'JavaSCrIPT'\n *   capitalize('javaSCrIPT', true);    // -> 'Javascript'\n */\nexport const capitalize = (str: string, lower = false) =>\n\t(lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n\t\tmatch.toUpperCase()\n\t);\n\nexport function formatDate(input: string | number): string {\n\tconst date = new Date(input);\n\treturn date.toLocaleDateString(\"en-US\", {\n\t\tmonth: \"long\",\n\t\tday: \"numeric\",\n\t\tyear: \"numeric\",\n\t});\n}\n\nexport function absoluteUrl(path: string) {\n\treturn `${process.env.NEXT_PUBLIC_APP_URL}${path}`;\n}\n", "\"use client\";\n\nimport React, { ReactElement, useEffect, useMemo, useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nexport interface AnimatedListProps {\n  className?: string;\n  children: React.ReactNode;\n  delay?: number;\n}\n\nexport const AnimatedList = React.memo(\n  ({ className, children, delay = 1000 }: AnimatedListProps) => {\n    const [index, setIndex] = useState(0);\n    const childrenArray = React.Children.toArray(children);\n\n    useEffect(() => {\n      const interval = setInterval(() => {\n        setIndex((prevIndex) => (prevIndex + 1) % childrenArray.length);\n      }, delay);\n\n      return () => clearInterval(interval);\n    }, [childrenArray.length, delay]);\n\n    const itemsToShow = useMemo(\n      () => childrenArray.slice(0, index + 1).reverse(),\n      [index, childrenArray],\n    );\n\n    return (\n      <div className={`flex flex-col items-center gap-4 ${className}`}>\n        <AnimatePresence>\n          {itemsToShow.map((item) => (\n            <AnimatedListItem key={(item as ReactElement).key}>\n              {item}\n            </AnimatedListItem>\n          ))}\n        </AnimatePresence>\n      </div>\n    );\n  },\n);\n\nAnimatedList.displayName = \"AnimatedList\";\n\nexport function AnimatedListItem({ children }: { children: React.ReactNode }) {\n  const animations = {\n    initial: { scale: 0, opacity: 0 },\n    animate: { scale: 1, opacity: 1, originY: 0 },\n    exit: { scale: 0, opacity: 0 },\n    transition: { type: \"spring\", stiffness: 350, damping: 40 },\n  };\n\n  return (\n    <motion.div {...animations} layout className=\"mx-auto w-full\">\n      {children}\n    </motion.div>\n  );\n}\n", "\"use client\";\n\nimport { cn } from \"../../../lib/utils\";\nimport { AnimatedList } from \"../ui/animated-list\";\n\ninterface Item {\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  time: string;\n}\n\nlet notifications = [\n  {\n    name: \"Payment received\",\n    description: \"Magic UI\",\n    time: \"15m ago\",\n\n    icon: \"\uD83D\uDCB8\",\n    color: \"#00C9A7\",\n  },\n  {\n    name: \"User signed up\",\n    description: \"Magic UI\",\n    time: \"10m ago\",\n    icon: \"\uD83D\uDC64\",\n    color: \"#FFB800\",\n  },\n  {\n    name: \"New message\",\n    description: \"Magic UI\",\n    time: \"5m ago\",\n    icon: \"\uD83D\uDCAC\",\n    color: \"#FF3D71\",\n  },\n  {\n    name: \"New event\",\n    description: \"Magic UI\",\n    time: \"2m ago\",\n    icon: \"\uD83D\uDDDE\uFE0F\",\n    color: \"#1E86FF\",\n  },\n];\n\nnotifications = Array.from({ length: 10 }, () => notifications).flat();\n\nconst Notification = ({ name, description, icon, color, time }: Item) => {\n  return (\n    <figure\n      className={cn(\n        \"relative mx-auto min-h-fit w-full max-w-[400px] cursor-pointer overflow-hidden rounded-2xl p-4\",\n        // animation styles\n        \"transition-all duration-200 ease-in-out hover:scale-[103%]\",\n        // light styles\n        \"bg-white [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)]\",\n        // dark styles\n        \"transform-gpu dark:bg-transparent dark:backdrop-blur-md dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset]\",\n      )}\n    >\n      <div className=\"flex flex-row items-center gap-3\">\n        <div\n          className=\"flex size-10 items-center justify-center rounded-2xl\"\n          style={{\n            backgroundColor: color,\n          }}\n        >\n          <span className=\"text-lg\">{icon}</span>\n        </div>\n        <div className=\"flex flex-col overflow-hidden\">\n          <figcaption className=\"flex flex-row items-center whitespace-pre text-lg font-medium dark:text-white \">\n            <span className=\"text-sm sm:text-lg\">{name}</span>\n            <span className=\"mx-1\">\u00B7</span>\n            <span className=\"text-xs text-gray-500\">{time}</span>\n          </figcaption>\n          <p className=\"text-sm font-normal dark:text-white/60\">\n            {description}\n          </p>\n        </div>\n      </div>\n    </figure>\n  );\n};\n\nexport default function AnimatedListDemo({\n  className,\n}: {\n  className?: string;\n}) {\n  return (\n    <div\n      className={cn(\n        \"relative flex h-[500px] w-full flex-col p-6 overflow-hidden rounded-lg border bg-background md:shadow-xl\",\n        className,\n      )}\n    >\n      <AnimatedList>\n        {notifications.map((item, idx) => (\n          <Notification {...item} key={idx} />\n        ))}\n      </AnimatedList>\n    </div>\n  );\n}\n", "import {\r\n\tdefineDocumentType,\r\n\tdefineNestedType,\r\n\tmakeSource,\r\n} from \"contentlayer2/source-files\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\n\r\nimport { visit } from \"unist-util-visit\";\r\n\r\nimport { rehypeComponent } from \"./lib/rehype-component\";\r\nimport { rehypeNpmCommand } from \"./lib/rehype-npm-command\";\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields: import(\"contentlayer2/source-files\").ComputedFields = {\r\n\turl: {\r\n\t\ttype: \"string\",\r\n\t\tresolve: (post: any) => `/${post._raw.flattenedPath}`,\r\n\t},\r\n\timage: {\r\n\t\ttype: \"string\",\r\n\t\tresolve: (post: any) =>\r\n\t\t\t`${process.env.NEXT_PUBLIC_APP_URL}/api/og?title=${encodeURI(\r\n\t\t\t\tpost.title\r\n\t\t\t)}`,\r\n\t},\r\n\tslug: {\r\n\t\ttype: \"string\",\r\n\t\tresolve: (doc: any) => `/${doc._raw.flattenedPath}`,\r\n\t},\r\n\tslugAsParams: {\r\n\t\ttype: \"string\",\r\n\t\tresolve: (doc: any) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n\t},\r\n\tstructuredData: {\r\n\t\ttype: \"json\",\r\n\t\tresolve: (doc: any) => ({\r\n\t\t\t\"@context\": \"https://schema.org\",\r\n\t\t\t\"@type\": `BlogPosting`,\r\n\t\t\theadline: doc.title,\r\n\t\t\tdatePublished: doc.date,\r\n\t\t\tdateModified: doc.date,\r\n\t\t\tdescription: doc.summary,\r\n\t\t\timage: doc.image,\r\n\t\t\turl: `https://nxtrepo/${doc._raw.flattenedPath}`,\r\n\t\t\tauthor: {\r\n\t\t\t\t\"@type\": \"Person\",\r\n\t\t\t\tname: doc.author,\r\n\t\t\t\turl: `https://twitter.com/${doc.author}`,\r\n\t\t\t},\r\n\t\t}),\r\n\t},\r\n};\r\n\r\nconst LinksProperties = defineNestedType(() => ({\r\n\tname: \"LinksProperties\",\r\n\tfields: {\r\n\t\tdoc: {\r\n\t\t\ttype: \"string\",\r\n\t\t},\r\n\t\tapi: {\r\n\t\t\ttype: \"string\",\r\n\t\t},\r\n\t},\r\n}));\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n\tname: \"Doc\",\r\n\tfilePathPattern: `docs/**/*.mdx`,\r\n\tcontentType: \"mdx\",\r\n\tfields: {\r\n\t\ttitle: {\r\n\t\t\ttype: \"string\",\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tdescription: {\r\n\t\t\ttype: \"string\",\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tdate: { type: \"date\", required: false },\r\n\t\tpublished: {\r\n\t\t\ttype: \"boolean\",\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\tlinks: {\r\n\t\t\ttype: \"nested\",\r\n\t\t\tof: LinksProperties,\r\n\t\t},\r\n\t\tfeatured: {\r\n\t\t\ttype: \"boolean\",\r\n\t\t\tdefault: false,\r\n\t\t\trequired: false,\r\n\t\t},\r\n\t\ttoc: { type: \"boolean\", default: true, required: false },\r\n\t\tauthor: { type: \"string\", required: false },\r\n\t\tvideo: { type: \"string\", required: false },\r\n\t},\r\n\t// @ts-ignore\r\n\tcomputedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n\tcontentDirPath: \"./content\",\r\n\tdocumentTypes: [Doc],\r\n\tmdx: {\r\n\t\tremarkPlugins: [remarkGfm],\r\n\t\trehypePlugins: [\r\n\t\t\trehypeSlug,\r\n\t\t\trehypeComponent,\r\n\t\t\t() => (tree) => {\r\n\t\t\t\tvisit(tree, (node) => {\r\n\t\t\t\t\tif (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n\t\t\t\t\t\tconst [codeEl] = node.children;\r\n\t\t\t\t\t\tif (codeEl.tagName !== \"code\") {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (codeEl.data?.meta) {\r\n\t\t\t\t\t\t\t// Extract event from meta and pass it down the tree.\r\n\t\t\t\t\t\t\tconst regex = /event=\"([^\"]*)\"/;\r\n\t\t\t\t\t\t\tconst match = codeEl.data?.meta.match(regex);\r\n\t\t\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\t\t\tnode.__event__ = match ? match[1] : null;\r\n\t\t\t\t\t\t\t\tcodeEl.data.meta = codeEl.data.meta.replace(regex, \"\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnode.__rawString__ = codeEl.children?.[0].value;\r\n\t\t\t\t\t\tnode.__src__ = node.properties?.__src__;\r\n\t\t\t\t\t\tnode.__style__ = node.properties?.__style__;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t[\r\n\t\t\t\trehypePrettyCode,\r\n\t\t\t\t{\r\n\t\t\t\t\ttheme: \"github-dark\",\r\n\t\t\t\t\tonVisitLine(node: any) {\r\n\t\t\t\t\t\t// Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n\t\t\t\t\t\t// lines to be copy/pasted\r\n\t\t\t\t\t\tif (node.children.length === 0) {\r\n\t\t\t\t\t\t\tnode.children = [{ type: \"text\", value: \" \" }];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonVisitHighlightedLine(node: any) {\r\n\t\t\t\t\t\tnode.properties.className\r\n\t\t\t\t\t\t\t? node.properties.className.push(\"line--highlighted\")\r\n\t\t\t\t\t\t\t: null;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonVisitHighlightedWord(node: any) {\r\n\t\t\t\t\t\tnode.properties.className = [\"word--highlighted\"];\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\t() => (tree) => {\r\n\t\t\t\tvisit(tree, (node) => {\r\n\t\t\t\t\tif (node?.type === \"element\" && node?.tagName === \"div\") {\r\n\t\t\t\t\t\tif (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst preElement = node.children.at(-1);\r\n\t\t\t\t\t\tif (preElement.tagName !== \"pre\") {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpreElement.properties[\"__withMeta__\"] =\r\n\t\t\t\t\t\t\tnode.children.at(0).tagName === \"div\";\r\n\t\t\t\t\t\tpreElement.properties[\"__rawString__\"] = node.__rawString__;\r\n\r\n\t\t\t\t\t\tif (node.__src__) {\r\n\t\t\t\t\t\t\tpreElement.properties[\"__src__\"] = node.__src__;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (node.__event__) {\r\n\t\t\t\t\t\t\tpreElement.properties[\"__event__\"] = node.__event__;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (node.__style__) {\r\n\t\t\t\t\t\t\tpreElement.properties[\"__style__\"] = node.__style__;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\trehypeNpmCommand,\r\n\t\t\t[\r\n\t\t\t\trehypeAutolinkHeadings,\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties: {\r\n\t\t\t\t\t\tclassName: [\"anchor\"],\r\n\t\t\t\t\t\tariaLabel: \"Link to section\",\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t],\r\n\t},\r\n});\r\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { u } from \"unist-builder\";\nimport { visit } from \"unist-util-visit\";\n\nimport { UnistNode, UnistTree } from \"@/types/unist\";\n\nimport { registry } from \"../registry\";\n\n// import { styles } from \"../registry/styles\"\n\nexport function rehypeComponent() {\n  return async (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      const { value: src } = getNodeAttributeByName(node, \"src\") || {};\n\n      if (node.name === \"ComponentSource\") {\n        const name = getNodeAttributeByName(node, \"name\")?.value as string;\n\n        if (!name) {\n          return null;\n        }\n\n        try {\n          // for (const style of styles) {\n          const component = registry[name];\n          const src = component.files[0];\n\n          // Read the source file.\n          const filePath = path.join(process.cwd(), src);\n          let source = fs.readFileSync(filePath, \"utf8\");\n\n          // Replace imports.\n          // TODO: Use @swc/core and a visitor to replace this.\n          // For now a simple regex should do.\n          source = source.replaceAll(`@/registry/`, \"@/\");\n          // source = source.replaceAll(\"export default\", \"export\");\n\n          // Add code as children so that rehype can take over at build time.\n          node.children?.push(\n            u(\"element\", {\n              tagName: \"pre\",\n              properties: {\n                __src__: src,\n              },\n              // attributes: [\n              //   {\n              //     name: \"styleName\",\n              //     type: \"mdxJsxAttribute\",\n              //     value: style.name,\n              //   },\n              // ],\n              children: [\n                u(\"element\", {\n                  tagName: \"code\",\n                  properties: {\n                    className: [\"language-tsx\"],\n                  },\n                  data: {\n                    meta: `event=\"copy_source_code\"`,\n                  },\n                  children: [\n                    {\n                      type: \"text\",\n                      value: source,\n                    },\n                  ],\n                }),\n              ],\n            }),\n          );\n          // }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      if (node.name === \"ComponentPreview\" || node.name === \"BlockPreview\") {\n        const name = getNodeAttributeByName(node, \"name\")?.value as string;\n\n        if (!name) {\n          return null;\n        }\n\n        try {\n          // for (const style of styles) {\n          const component = registry[name];\n          const src = component.files[0];\n\n          // Read the source file.\n          const filePath = path.join(process.cwd(), src);\n          let source = fs.readFileSync(filePath, \"utf8\");\n\n          // console.log(\"name \", name);\n          // console.log(\"source \", source);\n\n          // Replace imports.\n          // TODO: Use @swc/core and a visitor to replace this.\n          // For now a simple regex should do.\n          source = source.replaceAll(`@/registry/`, \"@/\");\n          source = source.replaceAll(\"export default\", \"export\");\n\n          // Add code as children so that rehype can take over at build time.\n          node.children?.push(\n            u(\"element\", {\n              tagName: \"pre\",\n              properties: {\n                __src__: src,\n              },\n              children: [\n                u(\"element\", {\n                  tagName: \"code\",\n                  properties: {\n                    className: [\"language-tsx\"],\n                  },\n                  data: {\n                    meta: `event=\"copy_usage_code\"`,\n                  },\n                  children: [\n                    {\n                      type: \"text\",\n                      value: source,\n                    },\n                  ],\n                }),\n              ],\n            }),\n          );\n          // }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    });\n  };\n}\n\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\n  return node.attributes?.find((attribute:any) => attribute.name === name);\n}\n\n// function getComponentSourceFileContent(node: UnistNode) {\n//   const src = getNodeAttributeByName(node, \"src\")?.value as string;\n\n//   if (!src) {\n//     return null;\n//   }\n\n//   // Read the source file.\n//   const filePath = path.join(process.cwd(), src);\n//   const source = fs.readFileSync(filePath, \"utf8\");\n\n//   return source;\n// }\n", "import * as React from \"react\";\n\nimport { Registry } from \"./components/schema\";\n\n\nconst ui: Registry = {\n\t\"animated-list\": {\n\t\tname: \"animated-list\",\n\t\ttype: \"components:ui\",\n\t\tfiles: [\"registry/components/ui/animated-list.tsx\"],\n\t},\n};\nconst example: Registry = {\n\t\"animated-list-demo\": {\n\t\tname: \"animated-list-demo\",\n\t\ttype: \"components:example\",\n\t\tregistryDependencies: [\"animated-list\"],\n\t\tfiles: [\"registry/components/example/animated-list-demo.tsx\"],\n\t\tcomponent: React.lazy(\n\t\t\t() => import(\"../registry/components/example/animated-list-demo\")\n\t\t),\n\t},\n};\nexport const registry: Registry = {\n  ...ui,\n  ...example,\n};\n\nconst resolvedExamples = Object.entries(example).map(([key, value]) => ({\n  ...value,\n  component: () => void 0,\n}));\nconst updatedExample: Registry = resolvedExamples.reduce(\n  (acc, curr) => ({ ...acc, [curr.name]: curr }),\n  {},\n);\nexport const downloadRegistry: Registry = { ...ui, ...updatedExample };\n\nexport type ComponentName = keyof (typeof ui & typeof example);\n", "import { UnistNode, UnistTree } from \"@/types/unist\";\nimport { visit } from \"unist-util-visit\";\n\nexport function rehypeNpmCommand() {\n  return (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      if (node.type !== \"element\" || node?.tagName !== \"pre\") {\n        return;\n      }\n\n      // npm install.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npm install\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"];\n        node.properties[\"__npmCommand__\"] = npmCommand;\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"yarn add\",\n        );\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"pnpm add\",\n        );\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"bun add\",\n        );\n      }\n\n      // npx create.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"];\n        node.properties[\"__npmCommand__\"] = npmCommand;\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"yarn create \",\n        );\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"pnpm create \",\n        );\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"bunx --bun\",\n        );\n      }\n\n      // npx.\n      if (\n        node.properties?.[\"__rawString__\"]?.startsWith(\"npx\") &&\n        !node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")\n      ) {\n        const npmCommand = node.properties?.[\"__rawString__\"];\n        node.properties[\"__npmCommand__\"] = npmCommand;\n        node.properties[\"__yarnCommand__\"] = npmCommand;\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"pnpm dlx\",\n        );\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"bunx --bun\",\n        );\n      }\n    });\n  };\n}\n"],
  "mappings": "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",
  "names": ["React", "visit", "React", "src", "visit", "visit"]
}
